// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"mU2m7iYi7CZFmPXj24//FwAA///LHreagrMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

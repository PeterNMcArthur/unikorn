// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
